/*
 * generated by Xtext
 */
package emfviews.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import emfviews.dsl.sqlview.Metamodel
import emfviews.dsl.sqlview.Model

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SqlviewGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		fsa.generateFile('myEAviewpoint.eviewtype', resource.compileEviewtype)
		fsa.generateFile('myEAviewpoint.ecl', resource.compileEcl)
	}
	def Iterable<Metamodel> getListMetamodels(Resource r){
		return r.allContents.toList().filter(typeof(Metamodel));
	}
	
	def compileEviewtype(Resource r) '''
		contributingMetamodels=
		«FOR e: r.getListMetamodels»
			«IF e.metamodelURL.toString.compareTo(r.allContents.toList().filter(typeof(Metamodel)).findFirst[true].metamodelURL.toString)==0»
				«e.metamodelURL.toString.substring(2, e.metamodelURL.toString.length-2)»
			«ELSE»
				«e.metamodelURL.toString.substring(2, e.metamodelURL.toString.length-2)»,
			«ENDIF»
		«ENDFOR»
		
		correspondenceModel=EAview_Test/1_viewtype/«r.allContents.toList().filter(typeof(Model)).findFirst[true].viewName».xmi
		correspondenceModelBase=EAview_Test/1_viewtype/«r.allContents.toList().filter(typeof(Model)).findFirst[true].viewName».ecl
		filtersMetamodel=/EAview_Test/1_viewtype/«r.allContents.toList().filter(typeof(Model)).findFirst[true].viewName».ecore
		
		
	''' 
	def compileEcl(Resource r) '''
		//alias_ea=http://www.obeonetwork.org/dsl/togaf/contentfwk/9.0.0
		//alias_bpmn=http://www.omg.org/spec/BPMN/20100524/MODEL-XMI
		//alias_reqif=http://www.omg.org/spec/ReqIF/20110401/reqif.xsd

		rule detailedProcess
		match s : ea!Process
		with  t : bpmn!Process
		{
			compare
			{
				return s.name = t.name;
			}
		}

		rule detailedRequirement
		match s : ea!Requirement
		with  t : reqif!SpecObject
		{
			compare
			{
				return t.values.exists(v | v.theValue=s.name);
			}
		}
		
		
	''' 
}
