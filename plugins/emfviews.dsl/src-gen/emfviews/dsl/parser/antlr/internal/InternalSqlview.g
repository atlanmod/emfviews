/*
* generated by Xtext
*/
grammar InternalSqlview;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package emfviews.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package emfviews.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import emfviews.dsl.services.SqlviewGrammarAccess;

}

@parser::members {

 	private SqlviewGrammarAccess grammarAccess;
 	
    public InternalSqlviewParser(TokenStream input, SqlviewGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SqlviewGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='create view' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getCreateViewKeyword_0());
    }
(
(
		lv_viewName_1_0=RULE_ID
		{
			newLeafNode(lv_viewName_1_0, grammarAccess.getModelAccess().getViewNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"viewName",
        		lv_viewName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getFromKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMetamodelMetamodelParserRuleCall_3_0()); 
	    }
		lv_metamodel_3_0=ruleMetamodel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"metamodel",
        		lv_metamodel_3_0, 
        		"Metamodel");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMetamodelMetamodelParserRuleCall_4_1_0()); 
	    }
		lv_metamodel_5_0=ruleMetamodel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"metamodel",
        		lv_metamodel_5_0, 
        		"Metamodel");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExpressionExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMetamodel
entryRuleMetamodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelRule()); }
	 iv_ruleMetamodel=ruleMetamodel 
	 { $current=$iv_ruleMetamodel.current; } 
	 EOF 
;

// Rule Metamodel
ruleMetamodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelAccess().getMetamodelURLEStringParserRuleCall_0_0()); 
	    }
		lv_metamodelURL_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelRule());
	        }
       		add(
       			$current, 
       			"metamodelURL",
        		lv_metamodelURL_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMetamodelAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelAccess().getMetamodelNameMetamodelNameParserRuleCall_2_0()); 
	    }
		lv_metamodelName_2_0=ruleMetamodelName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelRule());
	        }
       		add(
       			$current, 
       			"metamodelName",
        		lv_metamodelName_2_0, 
        		"MetamodelName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getSelectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getSelectSelectParserRuleCall_1_0()); 
	    }
		lv_select_1_0=ruleSelect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"select",
        		lv_select_1_0, 
        		"Select");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getFromKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getFromFromParserRuleCall_3_0()); 
	    }
		lv_from_3_0=ruleFrom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"from",
        		lv_from_3_0, 
        		"From");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='where' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getWhereKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getConditionConditionParserRuleCall_5_0()); 
	    }
		lv_condition_5_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"condition",
        		lv_condition_5_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_select_0_0=	'*' 
    {
        newLeafNode(lv_select_0_0, grammarAccess.getSelectAccess().getSelectAsteriskKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
       		addWithLastConsumed($current, "select", lv_select_0_0, "*");
	    }

)
)
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getMetamodelMetamodelNameCrossReference_1_0_0()); 
	}

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getClassClassParserRuleCall_1_2_0()); 
	    }
		lv_class_3_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"class",
        		lv_class_3_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getFullStopKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getAttributeAttributeParserRuleCall_1_4_0()); 
	    }
		lv_attribute_5_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"attribute",
        		lv_attribute_5_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getCommaKeyword_1_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getSelectAccess().getMetamodelMetamodelNameCrossReference_1_5_1_0()); 
	}

)
)	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelectAccess().getFullStopKeyword_1_5_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getClassClassParserRuleCall_1_5_3_0()); 
	    }
		lv_class_9_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"class",
        		lv_class_9_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSelectAccess().getFullStopKeyword_1_5_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getAttributeAttributeParserRuleCall_1_5_5_0()); 
	    }
		lv_attribute_11_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		add(
       			$current, 
       			"attribute",
        		lv_attribute_11_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleFrom
entryRuleFrom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFromRule()); }
	 iv_ruleFrom=ruleFrom 
	 { $current=$iv_ruleFrom.current; } 
	 EOF 
;

// Rule From
ruleFrom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFromAccess().getMetamodelMetamodelNameCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFromAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromAccess().getClassClassParserRuleCall_2_0()); 
	    }
		lv_class_2_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromRule());
	        }
       		add(
       			$current, 
       			"class",
        		lv_class_2_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFromAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFromRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFromAccess().getMetamodelMetamodelNameCrossReference_3_1_0()); 
	}

)
)	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFromAccess().getFullStopKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromAccess().getClassClassParserRuleCall_3_3_0()); 
	    }
		lv_class_6_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromRule());
	        }
       		add(
       			$current, 
       			"class",
        		lv_class_6_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleMetamodelName
entryRuleMetamodelName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelNameRule()); }
	 iv_ruleMetamodelName=ruleMetamodelName 
	 { $current=$iv_ruleMetamodelName.current; } 
	 EOF 
;

// Rule MetamodelName
ruleMetamodelName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMetamodelNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getValueComparisonParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='AND' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getANDKeyword_1_0_0());
    }

    |	otherlv_2='OR' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getORKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getValueComparisonParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getLeftLeftParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleLeft		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Left");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0());
    }

    |	otherlv_2='<=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_1());
    }

    |	otherlv_3='>=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_2());
    }

    |	otherlv_4='<' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_3());
    }

    |	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_4());
    }

    |	otherlv_6='<>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComparisonAccess().getLessThanSignGreaterThanSignKeyword_1_5());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightRightParserRuleCall_2_0()); 
	    }
		lv_right_7_0=ruleRight		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"Right");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	 iv_ruleLeft=ruleLeft 
	 { $current=$iv_ruleLeft.current; } 
	 EOF 
;

// Rule Left
ruleLeft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLeftAccess().getMetamodelMetamodelNameCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLeftRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLeftAccess().getClassClassCrossReference_2_0()); 
	}

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLeftAccess().getFullStopKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftAccess().getAttributeWhereLeftAttributeParserRuleCall_4_0()); 
	    }
		lv_attributeWhereLeft_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftRule());
	        }
       		set(
       			$current, 
       			"attributeWhereLeft",
        		lv_attributeWhereLeft_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	 iv_ruleRight=ruleRight 
	 { $current=$iv_ruleRight.current; } 
	 EOF 
;

// Rule Right
ruleRight returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRightAccess().getMetamodelMetamodelNameCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRightAccess().getFullStopKeyword_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRightAccess().getClassClassCrossReference_0_2_0()); 
	}

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRightAccess().getFullStopKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRightAccess().getAttributeWhereRightAttributeParserRuleCall_0_4_0()); 
	    }
		lv_attributeWhereRight_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRightRule());
	        }
       		set(
       			$current, 
       			"attributeWhereRight",
        		lv_attributeWhereRight_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRightAccess().getValueEStringParserRuleCall_1_0()); 
	    }
		lv_value_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRightRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


