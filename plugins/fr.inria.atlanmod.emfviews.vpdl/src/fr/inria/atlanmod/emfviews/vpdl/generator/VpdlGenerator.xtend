/*
 * generated by Xtext 2.12.0
 */
package fr.inria.atlanmod.emfviews.vpdl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.inria.atlanmod.emfviews.vpdl.vpdl.Metamodel
import fr.inria.atlanmod.emfviews.vpdl.vpdl.View
import org.eclipse.m2m.atl.emftvm.EmftvmFactory
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import org.eclipse.m2m.atl.emftvm.util.DefaultModuleResolver
import org.eclipse.m2m.atl.emftvm.util.TimingData
import java.io.ByteArrayOutputStream

/*
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VpdlGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    val name = viewpointName(resource)
	  
    fsa.generateFile(name + '.eviewpoint', resource.compileEviewpoint(fsa))
    fsa.generateFile(name + '.ecl', resource.compileEcl)
    fsa.generateFile(name + '.xmi', resource.compileXmi)
  }
  
  def String viewpointName(Resource r) {
    return r.allContents.toIterable().filter(View).<View>head.name
  }
  
  def Iterable<Metamodel> getListMetamodels(Resource r){
    return r.allContents.toIterable().filter(Metamodel);
  }

  // FIXME: is there a way to use relative paths to the weaving and 
  // matching models instead?
  def compileEviewpoint(Resource r, IFileSystemAccess2 fsa) '''
    contributingMetamodels=«r.getListMetamodels.map([m | m.nsURI]).join(',')»
    weavingModel=«fsa.getURI(viewpointName(r))».xmi
    matchingModel=«fsa.getURI(viewpointName(r))».ecl
  ''' 
  
  def compileEcl(Resource r) '''
    //alias_togaf=http://www.obeonetwork.org/dsl/togaf/contentfwk/9.0.0
    //alias_bpmn=http://www.omg.org/spec/BPMN/20100524/MODEL-XMI
    //alias_reqif=http://www.omg.org/spec/ReqIF/20110401/reqif.xsd

    rule detailedProcess
    match s : togaf!Process
    with  t : bpmn!Process
    {
      compare
      {
        return s.name = t.name;
      }
    }

    rule detailedRequirement
    match s : togaf!Requirement
    with  t : reqif!SpecObject
    {
      compare
      {
        return t.values.exists(v | v.theValue=s.name);
      }
    }
  '''
   
  def compileXmi(Resource r) {
    var factory = EmftvmFactory.eINSTANCE
    var rs = new ResourceSetImpl()
    
    var env = factory.createExecEnv();
    
    // Load metamodels
    var sourceMM = factory.createMetamodel()
    sourceMM.resource = rs.getResource(URI.createURI("http://www.inria.fr/atlanmod/emfviews/vpdl"), true)
    env.registerMetaModel("VPDL", sourceMM)
    
    var targetMM = factory.createMetamodel()
    targetMM.resource = rs.getResource(URI.createURI("http://inria.fr/virtualLinks"), true)
    env.registerMetaModel("VirtualLinks", targetMM)
    
    // Load models
    var sourceModel = factory.createModel()
    sourceModel.resource = r
    env.registerInputModel("IN", sourceModel)
    
    var targetModel = factory.createModel()
    // The URI does not actually matter here, as we save the resource to a String
    targetModel.resource = rs.createResource(URI.createFileURI(viewpointName(r) + ".xmi"))    
    env.registerOutputModel("OUT", targetModel)
    
    // Run the transformation
    var mr = new DefaultModuleResolver("platform:/plugin/fr.inria.atlanmod.emfviews.vpdl/transformation/",
      new ResourceSetImpl())
    
    var timing = new TimingData()
    env.loadModule(mr, "VPDL2VirtualLinks")
    timing.finishLoading    
    env.run(timing)
    timing.finish
    
    // Write to a String and return
    var out = new ByteArrayOutputStream()
    targetModel.resource.save(out, null)
    
    return new String(out.toByteArray())
  }
   
}
