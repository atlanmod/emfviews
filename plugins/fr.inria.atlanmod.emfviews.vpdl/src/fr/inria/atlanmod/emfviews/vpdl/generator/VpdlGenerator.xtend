/*
 * generated by Xtext 2.12.0
 */
package fr.inria.atlanmod.emfviews.vpdl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.inria.atlanmod.emfviews.vpdl.vpdl.Metamodel
import fr.inria.atlanmod.emfviews.vpdl.vpdl.Model

/*
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VpdlGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    fsa.generateFile('myEAviewpoint.eviewtype', resource.compileEviewtype)
    fsa.generateFile('myEAviewpoint.ecl', resource.compileEcl)
    fsa.generateFile('myEAviewpoint.xmi', resource.compileXmi)
  }
  
  def Iterable<Metamodel> getListMetamodels(Resource r){
    return r.allContents.toIterable().filter(Metamodel);
  }
  
  def compileEviewtype(Resource r) '''
    contributingMetamodels=
    «FOR e: r.getListMetamodels»
      «IF e.metamodelURL.toString.compareTo(r.allContents.toIterable.filter(Metamodel).<Metamodel>head.metamodelURL.toString)==0»
        «e.metamodelURL.toString.substring(2, e.metamodelURL.toString.length-2)»
      «ELSE»
        «e.metamodelURL.toString.substring(2, e.metamodelURL.toString.length-2)»,
      «ENDIF»
    «ENDFOR»
    
    correspondenceModel=EAview_Test/1_viewtype/«r.allContents.toIterable().filter(Model).<Model>head.viewName».xmi
    correspondenceModelBase=EAview_Test/1_viewtype/«r.allContents.toIterable().filter(Model).<Model>head.viewName».ecl
    filtersMetamodel=/EAview_Test/1_viewtype/«r.allContents.toIterable().filter(Model).<Model>head.viewName».ecore
  ''' 
  
  def compileEcl(Resource r) '''
    //alias_togaf=http://www.obeonetwork.org/dsl/togaf/contentfwk/9.0.0
    //alias_bpmn=http://www.omg.org/spec/BPMN/20100524/MODEL-XMI
    //alias_reqif=http://www.omg.org/spec/ReqIF/20110401/reqif.xsd

    rule detailedProcess
    match s : togaf!Process
    with  t : bpmn!Process
    {
      compare
      {
        return s.name = t.name;
      }
    }

    rule detailedRequirement
    match s : togaf!Requirement
    with  t : reqif!SpecObject
    {
      compare
      {
        return t.values.exists(v | v.theValue=s.name);
      }
    }
  '''
   
  def compileXmi(Resource r) '''
  '''
   
  def compileEcore(Resource r) '''
  '''
   
}
