/*******************************************************************************
 * Copyright (c) 2017, 2018 Armines
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 3
 * which is available at https://www.gnu.org/licenses/gpl-3.0.txt
 *
 * Contributors:
 *   fmdkdd - initial implementation
 *******************************************************************************/

grammar fr.inria.atlanmod.emfviews.vpdl.Vpdl with org.eclipse.xtext.common.Terminals
generate vpdl "http://www.inria.fr/atlanmod/emfviews/vpdl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Grammar for an SQL-like language to create model viewpoints
// to use with EMFViews

// TODO: allow uppercase keywords 

View: 'create' 'view' name=ID 'as'
  select=Select
  from=From
  where=Where?;
  
// TODO: allow wildcard '*'
Select: 'select' features+=SelectFeature (',' features+=SelectFeature)* ','?;

SelectFeature: metamodel=[Metamodel] '.' class=[ecore::EClass] rest=SelectFeatureRest;

SelectFeatureRest: '.' features+=Attribute
  | features+=Relation
  | '[' features+=Feature (',' features+=Feature)* ','? ']';

Feature: Attribute | Relation;

Attribute: attribute=[ecore::EStructuralFeature];

Relation: 'join' metamodelRight=[Metamodel] '.' classRight=[ecore::EClass] 'as' name=ID;

From: 'from' metamodels+=Metamodel (','metamodels+=Metamodel)* ','?;

Metamodel: nsURI=STRING 'as' name=ID;

Where:
  'where' rules+=Rule+
;

Rule:
  condition=STRING
  'for'
  relation=[Relation]
;

// These are for integrating a bit of the ECL syntax into VPDL
// Currently unused

Comparison:
  left+=Left ('=' | '<=' | '>=' | '<' | '>' | '<>') right+=Right
;
  
Left: metamodel+=[Metamodel|ID] '.' class+=ID '.' attributeWhereLeft=ID;
   
Right: (metamodel+=[Metamodel|ID] '.'class+=ID '.' attributeWhereRight=ID | value=STRING);
  
