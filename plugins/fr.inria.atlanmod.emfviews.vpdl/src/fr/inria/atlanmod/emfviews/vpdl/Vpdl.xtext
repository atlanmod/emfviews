grammar fr.inria.atlanmod.emfviews.vpdl.Vpdl with org.eclipse.xtext.common.Terminals
generate vpdl "http://www.inria.fr/atlanmod/emfviews/vpdl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Grammar for an SQL-like language to create model viewpoints
// to use with EMFViews

View: 'create' 'view' name=ID 'as'
  'select' select=Select
  'from' from=From
  ('where' (condition+=Condition)+);
  
// FIXME: allow wildcard '*'
Select: features+=SelectFeature ("," features+=SelectFeature)*;

SelectFeature: SelectAttribute | SelectRelation;
  
SelectAttribute: metamodel=[Metamodel|ID] '.' class=ID '.' feature=ID;

SelectRelation: metamodelLeft=[Metamodel|ID] '.' classLeft=ID 'join' 
  metamodelRight=[Metamodel|ID] '.' classRight=ID 'as'
  name=ID;
   
From: metamodels+=Metamodel ("," metamodels+=Metamodel)*;

Metamodel: URL=EString 'as' name=ID;

Condition:(value+=Comparison | value+=EclExpression) (('and' | 'or') 
  (value+=Comparison | value+=EclExpression))*;
  
EclExpression: value=EString;

Comparison:
  left+=Left ('=' | '<=' | '>=' | '<' | '>' | '<>') right+=Right;
  
Left: metamodel+=[Metamodel|ID] '.' class+=ID '.'
   attributeWhereLeft=ID;
   
Right: (metamodel+=[Metamodel|ID] '.'class+=ID '.'
  attributeWhereRight=ID | value=EString);
  
EString returns ecore::EString: STRING | ID;
