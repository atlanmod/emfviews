-- @atlcompiler emftvm
-- @nsURI VPDL=http://www.inria.fr/atlanmod/emfviews/vpdl
-- @nsURI VL=http://www.inria.fr/virtualLinks

module VPDL2VirtualLinks;
create OUT : VirtualLinks from IN : VPDL;

rule Model2VirtualLinks {
  from
  	s : VPDL!View
  to
  	t : VirtualLinks!WeavingModel (
		--virtualLinks <- s.expression.first()."from"->first().join, --Join2Association
		--linkedElements <- s.expression.first()."from"->first().join->collect(e|e.joinLeft->first().classLeft)
		--->append(s.expression.first()."from"->first().join->collect(e|e.joinRight->first().classRight))
		name <- s.name,
		whitelist <- true,
		contributingModels <- s."from".metamodels,
		virtualLinks <- VPDL!Attribute.allInstances()
    )
}

rule ContributingModels {
    from s : VPDL!Metamodel
    to t : VirtualLinks!ContributingModel (
         URI <- s.nsURI
       )
}

rule Filters {
    from s : VPDL!Attribute
    to
      f : VirtualLinks!Filter (
        name <- s.name,
        target <- c
      ),
      
      c : VirtualLinks!ConcreteElement (
          model <- s.refImmediateComposite().metamodel,
          path <- s.refImmediateComposite().class + '.' + s.name 
      )
}

--rule Join2Association {
--  from
--  	s : VPDL!Join
--  to
--  	t : VL!Association (
--   		name <- s.relation->first().name,
--		associationTypeName <- s.relation->first().name,
--		upperBound <- 1,
--		sourceElement <- s.joinLeft->first().classLeft,
--		targetElements <- s.joinRight->first().classRight
--    )
--	do{
--
--	}
--}
--
--rule ClassLeft2LinkedElement {
--  from
--  	s : VPDL!Class(s.refImmediateComposite().oclIsTypeOf(SQL!JoinLeft))
--  to
--  	t : VL!LinkedElement (
--   		elementRef <- '//'.concat(s.name),
--		modelRef <- thisModule.getURLFromMetamodel(s.refImmediateComposite().metamodelLeft->first().name),
--		name <- s.name
--    )
--	do{
--
--	}
--}
--
--rule ClassRight2LinkedElement {
--  from
--  	s : VPDL!Class(s.refImmediateComposite().oclIsTypeOf(SQL!JoinRight))
--  to
--  	t : VL!LinkedElement (
--   		elementRef <- '//'.concat(s.name),
--		modelRef <- thisModule.getURLFromMetamodel(s.refImmediateComposite().metamodelRight->first().name),
--		name <- s.name
--    )
--	do{
--
--	}
--}
