grammar fr.inria.atlanmod.emfviews.Mel with org.eclipse.xtext.common.Terminals
generate mel "http://www.inria.fr/atlanmod/emfviews/mel"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Specific grammar to define MM extensions

Model:
  ('import' imports+=Metamodel)*
  'define' extensionName=ID 'extending' metamodels+=[Metamodel] ("," metamodels+=[Metamodel])* 
  '{' extensions+=Extension* '}'
;

Metamodel:
  name=ID 'from' nsURI=STRING
;

Extension:
  AddClass | RefineClass | GeneralizeClass | ModifyClass | FilterClass
;

AddClass:
  'add' 'class' name=ID
;

RefineClass:
  'add' 'class' name=ID 'specializing' parent=TargetClass
;

TargetClass: 
  (metamodel=[Metamodel] '.')? name=ID
;

GeneralizeClass:
  'add' 'class' name=ID 'supertyping' children+=TargetClass ("," children+=TargetClass)*
;

ModifyClass:
  'modify' 'class' class=TargetClass '{'
    modifyOperators += ModifyOperator*
  '}'
;

ModifyOperator:
  AddProperty | ModifyProperty | FilterProperty | AddConstraint | FilterConstraint
;

AddProperty:
  'add' 'property' property=ID 'type' type+=Type (cardinality+=Cardinality)? (relationType+=RelationType)?
;

// TODO: handle classes as type
Type:
  type+=ID
;

ModifyProperty:
  'modify' 'property' property=ID value+=ValueAssignment ("," value+=ValueAssignment)*
;
ValueAssignment:
  attribute=ID '=' value=EString
;

FilterProperty:
  'filter' 'property' property=ID
;

FilterClass:
  'filter' 'class' class=TargetClass
;

AddConstraint:
  'add' 'constraint' constraint=ID value=EString
;

FilterConstraint:
  'filter' 'constraint' constraint=EString
;

Cardinality:
  '*..1' | '0..1' | '1..1' | '1..*' | '*..*' | '*' | '0..*'
;

RelationType:
  'composition' | 'association'
;

EString returns ecore::EString:
  STRING | ID
;