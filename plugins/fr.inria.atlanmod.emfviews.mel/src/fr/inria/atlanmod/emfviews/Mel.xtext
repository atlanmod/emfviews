grammar fr.inria.atlanmod.emfviews.Mel with org.eclipse.xtext.common.Terminals
generate mel "http://www.inria.fr/atlanmod/emfviews/Mel"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Specific grammar to define MM extensions

Model:
  'define' extensionName=ID 'extending' metamodel+=Metamodel ':' prefix+=Prefix ("," metamodel+=Metamodel ':'  prefix+=Prefix)* '{' extensions += Extension* '}'
;
Extension:
  Create | Refine | Generalize | ModifyClass | FilterClass 
;
Metamodel:
  name=ID
;
Prefix:
  name=ID
;
//1- Create from scratch: Create Class classA
Create:
  'add' 'class' class=ID
;
//2- Refining: Create Class classB extending classX
Refine:
  'add' 'class' classNew=ID 'specializing' prefix=[Prefix] '.' classOriginal=ID
;
//3- Generalize: Create Class Z supertyping A, B
Generalize:
  'add' 'class' classNew=ID 'supertyping' prefix+=[Prefix] '.' class+=ID ("," prefix+=[Prefix] '.' class+=ID)*
;
//Covers AddProperty, ModifyProperty, FilterProperty AddConstraint and FilterConstraint
ModifyClass:
  'modify' 'class' prefix=[Prefix] '.' class=ID '{'
    modifyOperators += ModifyOperator*
  '}'
;
ModifyOperator:
  AddProperty | ModifyProperty | FilterProperty | AddConstraint | FilterConstraint
;
//4- Add property: Alter Class classC Add propertyA [optional attributes]
AddProperty:
  'add' 'property' property=ID 'type' type+=Type (cardinality+=Cardinality)? (relationType+=RelationType)?
;
Type:
  type+=ID | prefix+=[Prefix] '.' class+=ID
;
//5- Modify property: Alter Class classA Modify propertyB [attribute1=value1, ...]
ModifyProperty:
  'modify' 'property' property=ID value+=ValueAssignment ("," value+=ValueAssignment)*
;
ValueAssignment:
  attribute=ID '=' value=EString
;
//6- Filter property: Alter Class classE Drop propertyC
FilterProperty:
  'filter' 'property' property=ID
;
//7- Filter class: Drop Class classA
FilterClass:
  'filter' 'class' prefix=[Prefix] '.' class=ID
;
//8- Add constraint: Alter Class classG Add Constraint constraintA value
AddConstraint:
  'add' 'constraint' constraint=ID value=EString
;
//9- Filter constraint: Alter Class classH Drop Constraint constraintB 
FilterConstraint:
  'filter' 'constraint' constraint=EString
;
Cardinality:
  '*..1' | '0..1' | '1..1' | '1..*' | '*..*' | '*' | '0..*'
;
RelationType:
  'composition' | 'association'
;

EString returns ecore::EString:
  STRING | ID
;