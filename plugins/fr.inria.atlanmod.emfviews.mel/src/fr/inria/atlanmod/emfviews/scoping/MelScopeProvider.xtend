/*
 * generated by Xtext 2.12.0
 */
package fr.inria.atlanmod.emfviews.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import fr.inria.atlanmod.emfviews.mel.MelPackage
import fr.inria.atlanmod.emfviews.mel.ConcreteClass
import org.eclipse.emf.ecore.EPackage
import org.eclipse.xtext.scoping.Scopes
import fr.inria.atlanmod.emfviews.mel.ModifyClass

/*
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MelScopeProvider extends AbstractMelScopeProvider {

  override getScope(EObject context, EReference reference) {
    if (reference == MelPackage.Literals.CONCRETE_CLASS__CLASS) {
      val cc = context as ConcreteClass
      val package = EPackage.Registry.INSTANCE.getEPackage(cc.metamodel.nsURI)
      if (package !== null) {
        val candidates = package.EClassifiers
        return Scopes.scopeFor(candidates)
      }
    }
    
    else if (reference == MelPackage.Literals.MODIFY_PROPERTY__PROPERTY
          || reference == MelPackage.Literals.FILTER_PROPERTY__PROPERTY) {
      val mc = context.eContainer as ModifyClass
      val cc = mc.class_ as ConcreteClass
      return Scopes.scopeFor(cc.class_.EStructuralFeatures) 
    }
    
    return super.getScope(context, reference)
  } 
}
