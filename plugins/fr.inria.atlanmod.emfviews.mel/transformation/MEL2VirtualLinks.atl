-- @atlcompiler emftvm
-- @nsURI MEL=http://www.inria.fr/atlanmod/emfviews/mel
-- @nsURI VL=http://www.inria.fr/virtualLinks
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore

module MEL2VirtualLinks;
create OUT : VirtualLinks from IN : MEL;

rule Model2VirtualLinks {
  from s : MEL!Model
  to   t : VirtualLinks!WeavingModel (
      name <- s.extensionName,
      whitelist <- false,      
      contributingModels <- s.metamodels,
      virtualLinks <- Bag{MEL!Create.allInstances(),
                          MEL!Refine.allInstances(),
                          MEL!Generalize.allInstances(),
                          MEL!AddProperty.allInstances(),
                          MEL!FilterClass.allInstances(),
                          MEL!FilterProperty.allInstances()
                          }->flatten()
	)
}

rule ContributingModels {
    from s : MEL!Metamodel
    to   t : VirtualLinks!ContributingModel (
        URI <- s.nsURI
    )
}

rule Create {
    from s : MEL!Create
    to   t : VirtualLinks!VirtualConcept (
		name <- s.class
		)
}

rule Refine {
    from s : MEL!Refine
    to
    t : VirtualLinks!VirtualConcept (
        name <- s.classNew,
        superConcepts <- Sequence{thisModule.TargetClass(s.parent)}
    )
}

rule Generalize {
    from s : MEL!Generalize
    to  
    t : VirtualLinks!VirtualConcept (
        name <- s.classNew,
        subConcepts <- s.children->collect(e | thisModule.TargetClass(e))
    )
}

rule FilterClass {
    from s : MEL!FilterClass
    to   t : VirtualLinks!Filter (
        name <- s.class.class,
        target <- thisModule.TargetClass(s.class)
    )
}

unique lazy rule TargetClass {
  from s : MEL!TargetClass
  to   t : VirtualLinks!ConcreteConcept (
      model <- s.metamodel,
      path <- s.class 
  )
}

rule AddProperty {
    from s : MEL!AddProperty
    to  
    t : VirtualLinks!VirtualProperty (
        name <- s.property,
        parent <- thisModule.TargetClass(s.refImmediateComposite().class),
        type <- s.type.get(0).type.get(0)
    )
}

rule FilterProperty {
    from s : MEL!FilterProperty
    to   t : VirtualLinks!Filter (
        name <- s.property,
        target <- thisModule.TargetClass(s.refImmediateComposite().class)
    )
}
