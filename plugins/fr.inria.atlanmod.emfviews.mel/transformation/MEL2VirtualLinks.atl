-- @atlcompiler emftvm
-- @path MEL=/fr.inria.atlanmod.emfviews.mel/model/generated/Mel.ecore
-- @path VirtualLinks=/fr.inria.atlanmod.emfviews.virtuallinks/resource/VirtualLinks.ecore
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore

module MEL2VirtualLinks;
create OUT : VirtualLinks from IN : MEL;

rule Model2VirtualLinks {
  from s : MEL!Model
  to   t : VirtualLinks!WeavingModel (
      name <- s.extensionName,
      whitelist <- false,
      contributingModels <- s.imports,
      virtualLinks <- Bag{MEL!AddClass.allInstances(),
                          MEL!RefineClass.allInstances(),
                          MEL!GeneralizeClass.allInstances(),
                          MEL!AddProperty.allInstances(),
                          MEL!FilterClass.allInstances(),
                          MEL!FilterProperty.allInstances()
                          }->flatten()
	)
}

rule Metamodel {
    from s : MEL!Metamodel
    to   t : VirtualLinks!ContributingModel (
        URI <- s.nsURI
    )
}

rule AddClass {
    from s : MEL!AddClass
    to   t : VirtualLinks!VirtualConcept (
		name <- s.name
	)
}

rule RefineClass {
    from s : MEL!RefineClass
    to
    t : VirtualLinks!VirtualConcept (
        name <- s.name,
        superConcepts <- Sequence{s.parent.toLink}
    )
}

rule GeneralizeClass {
    from s : MEL!GeneralizeClass
    to  
    t : VirtualLinks!VirtualConcept (
        name <- s.name,
        subConcepts <- s.children->collect(e | e.toLink)
    )
}

rule FilterClass {
    from s : MEL!FilterClass
    to   t : VirtualLinks!Filter (
        name <- s.class.name,
        target <- s.class.toLink
    )
}



rule AddProperty {
    from s : MEL!AddProperty
    to  
    t : VirtualLinks!VirtualProperty (
        name <- s.property,
        parent <- s.refImmediateComposite().class.toLink,
        type <- s.type.get(0).type.get(0)
    )
}

rule FilterProperty {
    from s : MEL!FilterProperty
    to   t : VirtualLinks!Filter (
        name <- s.property,
        target <- s.refImmediateComposite().class.toLink
    )
}

helper context MEL!TargetClass def : toLink : VirtualLinks!ConcreteConcept =
	thisModule.ConcreteConcept(self.metamodel, self.name)    
;

unique lazy rule ConcreteConcept {
  from m : MEL!Metamodel, name: ECORE!EString
  to   t : VirtualLinks!ConcreteConcept (
      model <- m,
      path <- name 
  )
}