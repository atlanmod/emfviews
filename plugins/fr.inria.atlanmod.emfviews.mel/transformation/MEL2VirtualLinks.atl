-- @atlcompiler emftvm
-- @path MEL=/fr.inria.atlanmod.emfviews.mel/model/generated/Mel.ecore
-- @path VirtualLinks=/fr.inria.atlanmod.emfviews.virtuallinks/resource/VirtualLinks.ecore
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore

module MEL2VirtualLinks;
create OUT : VirtualLinks from IN : MEL;

rule Model2VirtualLinks {
  from s : MEL!Model
  to   t : VirtualLinks!WeavingModel (
      name <- s.extensionName,
      whitelist <- false,
      contributingModels <- s.imports,
      virtualLinks <- Bag{MEL!AddClass.allInstances(),
                          MEL!AddAttribute.allInstances(),
                          MEL!AddReference.allInstances(),
                          MEL!FilterClass.allInstances(),
                          MEL!FilterProperty.allInstances()
                          }->flatten()
	)
}

rule Metamodel {
    from s : MEL!Metamodel
    to   t : VirtualLinks!ContributingModel (
        URI <- s.nsURI
    )
}

rule AddClass {
    from s : MEL!AddClass
    to   t : VirtualLinks!VirtualConcept (
        name <- s.name,
        superConcepts <- if s.parent.oclIsUndefined()
                         then Sequence{}
        				 else Sequence{s.parent.toLink()}
						 endif,
        subConcepts <- s.children->collect(e | e.toLink())
    )
}

rule FilterClass {
    from s : MEL!FilterClass
    to   t : VirtualLinks!Filter (
        name <- s.class.name,
        target <- s.class.toLink()
    )
}

rule AddAttribute {
    from s : MEL!AddAttribute
    to  
    t : VirtualLinks!VirtualProperty (
        name <- s.name,
        type <- s.type.name,
        parent <- s.refImmediateComposite().class.toLink()
    )
}

rule AddReference {
    from s : MEL!AddReference
    to  
    t : VirtualLinks!VirtualAssociation (
        name <- s.name,
        source <- s.refImmediateComposite().class.toLink(),
        target <- s.type.toLink(),
        --lowerBound <- s.cardinality
        --upperBound <- s.cardinality
        composition <- s.relationType = #composition
    )
}

rule FilterProperty {
    from s : MEL!FilterProperty
    to   t : VirtualLinks!Filter (
        name <- s.property,
        target <- s.refImmediateComposite().class.toLink()
    )
}

helper context MEL!TargetClass def : toLink() : VirtualLinks!Concept =
    if self.metamodel.oclIsUndefined()
    then MEL!AddClass.allInstances()->select(e | e.name = self.name)->first()
	else thisModule.ConcreteConcept(self.metamodel, self.name)
	endif
;

unique lazy rule ConcreteConcept {
	from m : MEL!Metamodel, name: ECORE!EString
	to   t : VirtualLinks!ConcreteConcept (
      model <- m,
      path <- name 
  	)
}
