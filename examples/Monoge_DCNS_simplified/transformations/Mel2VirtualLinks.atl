-- @path Extension=/Mel2VirtualLinks/metamodels/Extension.ecore
-- @path VirtualLinks=/Mel2VirtualLinks/metamodels/VirtualLinksMM2.ecore

module Mel2VirtualLinks;
create OUT : VirtualLinks from IN : Extension;

helper def : index : Integer = 1;
helper def : indexExtension : Integer = 1;
helper def : indexOperator : Integer = 1;
helper def : indexValue : Integer = 1;

rule Model2VirtualLinks {
  from 
  	s : Extension!Model
  to
  	t : VirtualLinks!VirtualLinks (
   		virtualLinks <- s.extensions
		--tambiÃ©n los modifyoperators de los extensions si es modifyclass
    )
	
	do{
		--If extension is modifyclass
		for(iterator in s.extensions){
			if(s.extensions.at(thisModule.indexExtension).oclIsTypeOf(Extension!ModifyClass)){
				'ModifyClass'.println();
				--for each operator create an Association
				for(iterator2 in s.extensions.at(thisModule.indexExtension).modifyOperators){
					--switch type of Extension
					--AddProperty
					if(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator).oclIsTypeOf(Extension!AddProperty)){
						t.virtualLinks <- t.virtualLinks->append(thisModule.AddProperty2Association(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator)));
					--ModifyProperty
					}else if(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator).oclIsTypeOf(Extension!ModifyProperty)){ 
						t.virtualLinks <- t.virtualLinks->append(thisModule.ModifyProperty2Association(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator)));
					--FilterProperty
					}else if(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator).oclIsTypeOf(Extension!FilterProperty)){ 
						t.virtualLinks <- t.virtualLinks->append(thisModule.FilterProperty2Association(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator)));
					--AddConstraint
					}else if(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator).oclIsTypeOf(Extension!AddConstraint)){ 
						t.virtualLinks <- t.virtualLinks->append(thisModule.AddConstraint2Association(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator)));
					--FilterConstraint
					}else if(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator).oclIsTypeOf(Extension!FilterConstraint)){ 
						t.virtualLinks <- t.virtualLinks->append(thisModule.FilterConstraint2Association(s.extensions.at(thisModule.indexExtension).modifyOperators.at(thisModule.indexOperator)));
					}else{
						'Unknown ModifyOperator'.println();
					}
					thisModule.indexOperator <- thisModule.indexOperator + 1;
				}
				thisModule.indexOperator <- 1;
			}
			thisModule.indexExtension <- thisModule.indexExtension + 1;
		}
	}
}
lazy rule AddProperty2Association{
  from 
  	s : Extension!AddProperty
  to
  	t : VirtualLinks!Association (
   		name <- 'AddProperty',
		upperBound <- 1,
		associationTypeName <- 'AddProperty',
		--sourceElement <- le,
		targetElements <- le,
		targetAttribute <- s.property,
		sourceAttribute <- s.type
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.refImmediateComposite().class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.refImmediateComposite().class
	)
}

lazy rule ModifyProperty2Association{
  from 
  	s : Extension!ModifyProperty
  to
  	t : VirtualLinks!Association (
   		name <- 'ModifyProperty',
		upperBound <- 1,
		associationTypeName <- 'ModifyProperty',
		sourceElement <- le,
		--targetElements <- le,
		sourceAttribute <- s.property,
		--can be several values
		targetAttribute <- ''
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.refImmediateComposite().class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.refImmediateComposite().class
	)
	do{
		--iterate values
		for(iterator in s.value){
			t.targetAttribute <- t.targetAttribute.concat(s.value.at(thisModule.indexValue).attribute + ':' + s.value.at(thisModule.indexValue).value);
			thisModule.indexValue <- thisModule.indexValue + 1;
		}
		thisModule.indexValue <- 1;
	}
}

lazy rule FilterProperty2Association{
  from 
  	s : Extension!FilterProperty
  to
  	t : VirtualLinks!Association (
   		name <- 'FilterProperty',
		upperBound <- 1,
		associationTypeName <- 'FilterProperty',
		sourceElement <- le,
		--targetElements <- le,
		sourceAttribute <- s.property,
		targetAttribute <- ''
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.refImmediateComposite().class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.refImmediateComposite().class
	)
}

lazy rule AddConstraint2Association{
  from 
  	s : Extension!AddConstraint
  to
  	t : VirtualLinks!Association (
   		name <- 'AddConstraint',
		upperBound <- 1,
		associationTypeName <- 'AddConstraint',
		sourceElement <- le,
		--targetElements <- le,
		sourceAttribute <- s.constraint,
		targetAttribute <- s.value
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.refImmediateComposite().class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.refImmediateComposite().class
	)
}

lazy rule FilterConstraint2Association{
  from 
  	s : Extension!FilterConstraint
  to
  	t : VirtualLinks!Association (
   		name <- 'FilterConstraint',
		upperBound <- 1,
		associationTypeName <- 'FilterConstraint',
		sourceElement <- le,
		--targetElements <- le,
		sourceAttribute <- s.constraint
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.refImmediateComposite().class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.refImmediateComposite().class
	)
}

rule Create2Association {
  from 
  	s : Extension!Create
  to
  	t : VirtualLinks!Association (
   		name <- 'Create',
		upperBound <- 1,
		associationTypeName <- 'Create',
		sourceAttribute <- s.class
    )
}

rule Refine2Association {
  from 
  	s : Extension!Refine
  to
  	t : VirtualLinks!Association (
   		name <- 'Refine',
		upperBound <- 1,
		associationTypeName <- 'Refine',
		sourceElement <- le,
		--targetElements <- ,
		targetAttribute <- s.classNew
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.classOriginal,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.classOriginal
	)
}

rule Generalize2Association {
  from 
  	s : Extension!Generalize
  to
  	t : VirtualLinks!Association (
   		name <- 'Generalize',
		upperBound <- 1,
		associationTypeName <- 'Generalize',
		--sourceElement <- ,
		--targetElements <- s.class,
		targetAttribute <- s.classNew
    )
	do{
		 --for each class create a LinkedElement
		for(iterator in s.class){
			'Generalize'.println();
			t.targetElements <- t.targetElements->append(thisModule.GeneralizeLinkedElement(s));
			thisModule.index <- thisModule.index + 1;
		}
		thisModule.index <- 1;
	}
}
lazy rule GeneralizeLinkedElement {
  from 
  	s : Extension!Generalize
  to
  	t : VirtualLinks!LinkedElement (
  		elementRef <- '//' + s.class.at(thisModule.index),
   		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.class.at(thisModule.index)
    )
}

rule FilterClass2Association {
  from 
  	s : Extension!FilterClass
  to
  	t : VirtualLinks!Association (
   		name <- 'FilterClass',
		upperBound <- 1,
		associationTypeName <- 'FilterClass',
		sourceElement <- le
		--targetElements <- ,
    ),
	le : VirtualLinks!LinkedElement(
		elementRef <- '//' + s.class,
		modelRef <- 'http://Original_Metamodel/1.0',
		name <- s.class
	)
}

--rule ModifyClass2Association {
--  from 
--  	s : Extension!ModifyClass
--  to
--  	t : VirtualLinks!Association (
--   		name <- 'FilterClass',
--		upperBound <- 1,
--		associationTypeName <- 'FilterClass',
--		sourceElement <- le
--		--targetElements <- ,
--    ),
--	le : VirtualLinks!LinkedElement(
--		elementRef <- '//' + s.class,
--		modelRef <- 'http://Original_Metamodel/1.0',
--		name <- s.class
--	)
--}

--rule AddProperty2Association{
--  from 
--  	s : Extension!AddProperty
--  to
--  	t : VirtualLinks!Association (
--   		name <- 'AddProperty',
--		upperBound <- 1,
--		associationTypeName <- 'AddProperty',
--		--sourceElement <- le,
--		targetElements <- le,
--		targetAttribute <- s.property
--    ),
--	le : VirtualLinks!LinkedElement(
--		elementRef <- '//' + s.refImmediateComposite().class,
--		modelRef <- 'http://Original_Metamodel/1.0',
--		name <- s.refImmediateComposite().class
--	)
--}