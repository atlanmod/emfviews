--------------------------------------------------------------------------------
-- Copyright (c) 2018 Armines
--
-- This program and the accompanying materials are made available under the
-- terms of the Eclipse Public License 2.0 which is available at
-- https://www.eclipse.org/legal/epl-2.0/
--
-- This Source Code may also be made available under the following Secondary
-- Licenses when the conditions for such availability set forth in the Eclipse
-- Public License, v. 2.0 are satisfied: GNU General Public License, version 3
-- which is available at https://www.gnu.org/licenses/gpl-3.0.txt
--
-- Contributors:
--   fmdkdd - initial implementation
--------------------------------------------------------------------------------

-- @atlcompiler emftvm
-- @path VPDL=/org.atlanmod.emfviews.vpdl/model/generated/Vpdl.ecore
-- @path VirtualLinks=/org.atlanmod.emfviews.virtuallinks/resource/VirtualLinks.ecore
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore

module VPDL2VirtualLinks;
create OUT : VirtualLinks from IN : VPDL;

helper context VPDL!Feature def : metamodel : VPDL!Metamodel =
    self.refImmediateComposite().refImmediateComposite().metamodel;

helper context VPDL!AllAttributes def : metamodel : VPDL!Metamodel =
    self.refImmediateComposite().refImmediateComposite().metamodel;

helper context VPDL!Feature def : class : ECORE!EClass =
    self.refImmediateComposite().refImmediateComposite().class;

helper context VPDL!AllAttributes def : class : ECORE!EClass =
    self.refImmediateComposite().refImmediateComposite().class;

rule Model2VirtualLinks {
  from
  	s : VPDL!View
  to
  	t : VirtualLinks!WeavingModel (
		name <- s.name,
		whitelist <- true,
		contributingModels <- s."from".metamodels,
		virtualLinks <- Bag{VPDL!Feature.allInstances(),
		                    VPDL!AllAttributes.allInstances()}->flatten()
    )
}

rule ContributingModels {
    from s : VPDL!Metamodel
    to t : VirtualLinks!ContributingModel (
         URI <- s.nsURI
       )
}

rule Filters {
    from s : VPDL!Attribute
    to
      f : VirtualLinks!Filter (
        name <- s.attribute.name,
        target <- c
      ),

      c : VirtualLinks!ConcreteElement (
          model <- s.metamodel,
          path <- s.class.name + '.' + s.attribute.name
      )
}

rule Relations {
	from s : VPDL!Relation
	to
	  a : VirtualLinks!VirtualAssociation (
	      name <- s.name,
	      source <- source,
	      target <- target,
	      upperBound <- -1
	  ),

	  source: VirtualLinks!ConcreteConcept (
	      model <- s.metamodel,
          path <- s.class.name
	  ),

	  target: VirtualLinks!ConcreteConcept (
	      model <- s.metamodelRight,
          path <- s.classRight.name
	  )
}

rule AllAttributes {
    from s : VPDL!AllAttributes
    to f : VirtualLinks!Filter (
          name <- '*',
          target <- c
        ),

        c : VirtualLinks!ConcreteElement (
          model <- s.metamodel,
          path <- s.class.name + '.*'
        )
}
